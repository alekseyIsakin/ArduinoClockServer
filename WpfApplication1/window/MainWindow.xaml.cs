using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.IO.Ports;  using ArdClock.ArdPage;  namespace ArdClock {     /// <summary>     /// Логика взаимодействия для MainWindow.xaml     /// </summary>     public partial class MainWindow : Window     {         private readonly System.Windows.Threading.DispatcherTimer timer;          private readonly SerialControl.DataSender DSender;         private APage SenderPage;          public static window.PageEditorWindow PEWindow;          //         // Предотвращение запуска второго экземпляра программы         //         static readonly System.Threading.Mutex mt;         static readonly bool isSingleProgram;          static MainWindow()         {             mt = new System.Threading.Mutex(false, " ", out isSingleProgram);              if (!isSingleProgram)
            {
                MessageBox.Show("Экземпляр программы уже запущен");                    System.Diagnostics.Process.GetCurrentProcess().Kill();             }         }         //         //         //          //         // Логика NotifyIcon         //         private readonly src.NIcon NIcon = null;          public void NotifyIcon_Click(object sender, EventArgs e)         {             if (((System.Windows.Forms.MouseEventArgs)e).Button == System.Windows.Forms.MouseButtons.Left)             {                 ChangeVisbleWindow();
                Activate();             }         }         private void Window_StateChanged(object sender, EventArgs e)         {             if (WindowState == WindowState.Minimized)              {                 ChangeVisbleWindow();                 WindowState = WindowState.Normal;             }         }         public void OnClose(object sender, EventArgs e) { Application.Current.Shutdown(); }         public void ChangeVisbleWindow()          {             Visibility = (Visibility == Visibility.Hidden) ? Visibility.Visible :                                                               Visibility.Hidden;          }           //         //         //         public MainWindow()         {             InitializeComponent();              NIcon = new src.NIcon();             NIcon.Click += NotifyIcon_Click;              NIcon.ContextMenuClose += OnClose;             NIcon.ContextMenuConnect += ConnectPortContext_Click;              timer = new System.Windows.Threading.DispatcherTimer();             timer.Tick += TimerElapsed;              DSender = new SerialControl.DataSender();             DSender.AvailSend += EnableSend;             DSender.SuccSend += LockSend;             string[] lstSpd = { "300", "1200", "2400", "4800", "9600", "19200", "38400" };             comboBoxSPD.ItemsSource = lstSpd;             comboBoxSPD.SelectedIndex = 4;              if (SerialPort.GetPortNames().Length > 0)             {                 comboBoxPort.ItemsSource = SerialPort.GetPortNames();                 comboBoxPort.SelectedIndex = 0;             }             else             {                 MessageBox.Show("Нет доступных портов");             }              List<APage> pg = XMLLoader.Loader.LoadPageListFromXML(window.PageEditorWindow.pathToXML);
             SenderPage = pg[0];         }          private void ConnectPort_Click(object sender, RoutedEventArgs e)         { Connect(); }         private void ConnectPortContext_Click(object sender, EventArgs e)          { Connect(); }          private void Connect()          {             if (DSender.IsConnect())             {                  DSender.Disconnect();                 StopTimer();             }             else             {                 try                 {                     string portName = comboBoxPort.Text;                     int baudRate = int.Parse(comboBoxSPD.Text);                      if (DSender.BaudRate != baudRate || DSender.PortName != portName)                     {                         DSender.SetBaudRate(baudRate);                         DSender.SetPortName(portName);                     }                     DSender.Connect();                      if ((bool)TimerCheckBox.IsChecked)                     {                         timer.Start();                         TimerElapsed(timer, null);                     }                 }                 catch (Exception ex)                 {                     MessageBox.Show("Ошибка: " + ex.Message);                 }             }              try             { SetConnectGuiState(DSender.IsConnect()); }             catch (Exception ex)             { MessageBox.Show(ex.Message); }         }         private void SetConnectGuiState(bool state)         {             try             {                 if (state)                 {                     string portName = comboBoxPort.Text;                     int baudRate = int.Parse(comboBoxSPD.Text);                      CurPortLabel.Content = portName + " " + baudRate.ToString();                     ConnectPortButton.Content = "Отключиться";                 }                 else                 {                     CurPortLabel.Content = "Disconnect";                     ConnectPortButton.Content = "Подключиться";                 }                 NIcon.ToggleIcon(DSender.IsConnect());                 LockEditPortField(!state);             }             catch { throw; }         }          private void LockEditPortField(bool state)          {             comboBoxSPD.IsEnabled    = state;             comboBoxPort.IsEnabled   = state;             //TimerCheckBox.IsEnabled = !state;         }          // Запуск/Остановка таймера         private void TimerCheckBox_Click(object sender, RoutedEventArgs e)         {             if (DSender.IsConnect())             {                  if ((bool)TimerCheckBox.IsChecked)                 {
                    TimerElapsed(timer, null);                     timer.Start();                 }                 else                     StopTimer();             }
            else              {                 TimerCheckBox.IsChecked = false;             }         }          private void TimerElapsed(object sender, EventArgs e)          {             if ((bool)TimerCheckBox.IsChecked)              {                  timer.Start();

                timer.Interval = TimeSpan.FromSeconds(                     Convert.ToInt32(((ComboBoxItem)TimeCountComboBox.SelectedItem).Content));             }             SendCurPage();         }          private void StopTimer()          {             TimerCheckBox.IsChecked = false;             timer.Stop();         }          //          private void SendCurPage()          {             try             {                 DSender.Send(SenderPage);                 Title = System.DateTime.Now.ToLongTimeString();             }             catch (Exception ex)             {                 StopTimer();                 DSender.Disconnect();                 SetConnectGuiState(DSender.IsConnect());                 MessageBox.Show("Ошибка отправки: " + ex.Message);             }                      }           // events         //         private void PageSettingButton_Click(object sender, RoutedEventArgs e)         {             PEWindow = new window.PageEditorWindow();             PEWindow.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;             PEWindow.button_Activate.Click += ButtonActivate_Click;             PEWindow.ShowDialog();         }          private void MenuAboutAppClick(object sender, EventArgs e)          {             MessageBox.Show("Версия сборки: " +                  System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString());         }          private void LockSend(object sender, EventArgs e)         { Button_singleSend.IsEnabled = false; }          private void EnableSend(object sender, EventArgs e)         { Button_singleSend.IsEnabled = true; }          private void ButtonActivate_Click(object sender, RoutedEventArgs e)         {             // Активация активной страницы из настроек             //             SenderPage = PEWindow.CurPage;              if (SenderPage != null)             {                 PEWindow.ShowPopup("Активирована страница:\n" + SenderPage.Name);                 PEWindow.Close();             }             else             {                 PEWindow.ShowPopup("Пусто");             }         }          private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)         { NIcon.Dispose(); }          private void Button_sendClear_Click(object sender, RoutedEventArgs e)         {
            try             { DSender.SendClearCode(); }             catch (Exception ex)             { MessageBox.Show("Ошибка отправки\n" + ex.Message); }
        }          private void Button_singleSend_Click_1(object sender, RoutedEventArgs ev)         {             try             { DSender.Send(SenderPage); }             catch (Exception e)             { MessageBox.Show("Ошибка одиночной отправки\n" + e.Message); }         }          private void MenuAboutAppClick(object sender, RoutedEventArgs e)         {             Version v = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;             DateTime dt = new DateTime();

            dt = dt.AddYears(1999);             dt = dt.AddDays(v.Build);             dt = dt.AddSeconds(v.Revision*2);

            string Build = string.Format("сборка от {0}", dt);                          MessageBox.Show(Build);         }     } } 